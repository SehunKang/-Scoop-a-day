default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
SLACK_URL = ENV["SLACK_URL"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  lane :deploy do |lane|

  	if !lane[:bump]
	  raise "bump type error! choose one of 'test, major, minor'"
	end

	type = lane[:bump]

    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
     key_id: APPLE_KEY_ID,
     issuer_id: APPLE_ISSUER_ID,
     key_content: APPLE_KEY_CONTENT,
     duration: 1200,
     in_house: false
    )

    increment_build_number(xcodeproj: "ReleaseProject.xcodeproj")

	if type != "test"
	  increment_version_number(
	    bump_type: type
	  )
	end
	
    cocoapods(
      clean_install: true
    )

    match(
     type: 'appstore',
     app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
     git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
     readonly: true,
     keychain_name: keychain_name,
     keychain_password: keychain_password,
     api_key: api_key
   )

    gym(
      configuration: "Release",
      workspace: "ReleaseProject.xcworkspace",
      scheme: "ReleaseProject",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

	if type == test
      pilot(
        apple_id: "#{DEVELOPER_APP_ID}",
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        skip_waiting_for_build_processing: false,
        skip_submission: true,
        distribute_external: false,
        notify_external_testers: false,
        ipa: "./ReleaseProject.ipa"
      )
	else
	  deliver(
        submit_for_review: true,
        force: true,
        skip_screenshots: true,
        automatic_release: true,
        ipa: "./ReleaseProject.ipa",
        release_notes: {
          "en-US" => File.read("../ReleaseProject/ReleaseNote/en-US.txt"),
		  "ko" => File.read("../ReleaseProject/ReleaseNote/ko.txt"),
		  "zh=Hans" => File.read("../ReleaseProject/ReleaseNote/zh-Hans.txt")
          }
        )
	end

    delete_temp_keychain(keychain_name)
  end
end

after_all do |lane|
  if lane != test
    version = get_version_number(
      xcodeproj: "ReleaseProject.xcodeproj",
      target: "ReleaseProject"
    )
    build = get_build_number(xcodeproj: "ReleaseProject.xcodeproj")

    github_release = set_github_release(
      repository_name: "SehunKang/-Scoop-a-day",
      api_token: GIT_AUTHORIZATION,
	  name: "#{lane.capitalize} version v#{version}",
	  tag_name: "v#{version}",
	  description: File.read("./ReleaseProject/ReleaseNote/ko.txt")
	)

    slack(
      message: "App successfully released!",
        slack_url: SLACK_URL,
        default_payloads: [:lane, :test_result, :git_branch, :git_author],
        payload: {
	      "Version": version + " (" + build + ")"
        }
      )
  end
end
